//Задание номер 1

function sum(x) {
    return function(y) {
        return x+y;
    }
};
const sum1 = sum(1);
console.log(sum1(2));

//Задание номер 2

//Цикл for повторяется у нас 10 раз. В каждой итерации у  нас создается новый console.log которая фиксирует переменную i. Когда цикл завершится, то переменная i 
//будет иметь значение 10. Далее выполняется функция setTimeout через 0 секунд. console.log считывает наше значение переменной i (которое равно 10) и через 0 секунд 
//выводит его в console.log По итогу будет вывод 10 раз переменной i со значением 10. Решить проблему можно несколькими вариантами, например через let (так как у var 
//иная область видимости) или вариантом добавления анонимной функции. Вариант представлен ниже

//При использовании самовызывающей функции (в нашем варианте), она создает каждому из замыканий свое собственное лексическое окружение (независимое). 
//То есть, если рассматривать наш вариант, у нас при каждом проходе (а их 10), будет создаваться свое лексическое окружение, независимое, потому что мы вызываем
//функцию + создаем переменную и делаем связь на новую созданную переменную index. Грубо говоря, при каждом проходе цикла полученная информация "держится" в памяти.
//То есть, при первом проходе 1, затем 2 и т.д. И по итогу обработки цикла получается вывод данных от 1 до 10.

//Условие

for (var i = 0; i < 10; i++) {
    setTimeout(function() {
        console.log(i);
    }, 0);
}


//Вариант решения - добавить анонимную функцию и вставить в нее setTimeout, для того, чтобы передавать другое значение i на каждой итерации

for (var i = 1; i <= 10; i++) {
    (function() {
        let index = i
        setTimeout(function() {
            console.log(index);
        }, 0);
    })()
};

//Результатом выполнения будут значения от 1 до 10, что и требовалось.